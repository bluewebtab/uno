<!-- {{ 'mini-cart.css' | asset_url | stylesheet_tag }} -->



<header class="header" id="header">
    <div class="header-inner flex space-between">

      
      {% unless template == "product" %}
      <button class="menu-button" @click="toggleMenu">
        <span>Menu</span>
      </button>
      {% else %}
      <a href="javascript:history.back()" class="menu-button">
        <span>Back</span>
      </a>
      {% endunless %}
    

      <a href="/" class="header-title">{{shop.name}}</a>


      <div class="cart-button-container" @click="toggleMiniCart">
        <button class="cart-button">
            <span>
              <template v-if="cart">
                Cart (${cart.item_count})
              </template>
            </span>
        </button>
      </div>
    </div>

    <div class="menu-drawer" :class="{ menuNotVisible: menuDrawer }">
      {% render 'menu-drawer' %}
    </div>

    <div class="mini-cart" :class="{ notVisible: miniCart }">
      <button class="mini-cart-close-button" @click="toggleMiniCart">Close</button>
      {% render 'mini-cart' %}
    </div>
    <div class="clicked-outside" v-if="!miniCart || !menuDrawer" @click="closeAllDrawers"></div>
</header>



<script>
  const bodyTag = document.getElementsByTagName('body')[0];
  const showAnnouncement = document.getElementsByClassName('announcement-bar');
  const changeHeader = document.getElementById('header');

  if (showAnnouncement.length > 0) {
    changeHeader.style.paddingTop = '20px';

    const onScroll = () => {
    const scrollLocation = document.documentElement.scrollTop;

    if(scrollLocation > 50){
      changeHeader.style.paddingTop = '0';

    }else{
      changeHeader.style.paddingTop = '20px';

    }
    
  }
  window.addEventListener('scroll', onScroll)

}

const store = Vue.reactive({
          state: {
            cartState: []
          },
          getCart(){
            axios.get('/cart.js')
              .then(response => {
                this.state.cartState.unshift(response.data)
              })
              .catch(error => {
                console.log(error)
              })
          }
        })

        const miniCartState = Vue.reactive({
          hidden: true
        })

        const toggleMiniCart = {
          openCart(){
            miniCartState.hidden = !miniCartState.hidden
            menuState.hidden = true
          }
        }

        const menuState = Vue.reactive({
          hidden: true
        })


        const toggleMenu = {
          openMenu(){
            menuState.hidden = !menuState.hidden
            miniCartState.hidden = true
          }
        }

        const toggleClose = {
          closeAll(){
            miniCartState.hidden = true
            menuState.hidden = true
          }
        }


 

if(document.querySelector('#header')){
  const headerCart = Vue.createApp({
    delimiters: ['${', '}'],
    data(){
      return {
        cartData: store.state.cartState
      }
    },
    methods: {
      toggleMiniCart(){
        toggleMiniCart.openCart()
      },
      toggleMenu(){
        toggleMenu.openMenu()
      },
      closeAllDrawers(){
          toggleClose.closeAll()
      },
      decrement(item){
        const data = {
          "id": item.key,
          "quantity": item.quantity - 1
        }

        axios.post('/cart/change.js', data)
          .then(response => {
            store.getCart()
          })
          .catch(error => console.log(error))
      },
      increment(item){
        const data = {
          "id": item.key,
          "quantity": item.quantity + 1
        }

        axios.post('/cart/change.js', data)
          .then(response => {
            store.getCart()
          })
          .catch(error => console.log(error))
      },
      money(value){
        if(!value) return 0
        return "$" + (value/100).toFixed(2)
      }
    },
    computed: {
      miniCart(){
        return miniCartState.hidden
      },
      menuDrawer(){
        return menuState.hidden
      },
      cart(){
        return this.cartData[0]
      }
    },
    created(){
      store.getCart()
    }
  }).mount('#header')
}

  
</script>

{% schema %}
{
  "name": "t:sections.header.name",
  "settings": [
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "value": "accent-1",
          "label": "t:sections.header.settings.color_scheme.options__1.label"
        },
        {
          "value": "accent-2",
          "label": "t:sections.header.settings.color_scheme.options__2.label"
        },
        {
          "value": "background-1",
          "label": "t:sections.header.settings.color_scheme.options__3.label"
        },
        {
          "value": "background-2",
          "label": "t:sections.header.settings.color_scheme.options__4.label"
        },
        {
          "value": "inverse",
          "label": "t:sections.header.settings.color_scheme.options__5.label"
        }
      ],
      "default": "background-1",
      "label": "t:sections.header.settings.color_scheme.label"
    },
    {
      "type": "image_picker",
      "id": "logo",
      "label": "t:sections.header.settings.logo.label"
    },
    {
      "type": "range",
      "id": "logo_width",
      "min": 50,
      "max": 250,
      "step": 10,
      "default": 100,
      "unit": "t:sections.header.settings.logo_width.unit",
      "label": "t:sections.header.settings.logo_width.label"
    },
    {
      "type": "select",
      "id": "logo_position",
      "options": [
        {
          "value": "middle-left",
          "label": "t:sections.header.settings.logo_position.options__1.label"
        },
        {
          "value": "top-left",
          "label": "t:sections.header.settings.logo_position.options__2.label"
        },
        {
          "value": "top-center",
          "label": "t:sections.header.settings.logo_position.options__3.label"
        }
      ],
      "default": "middle-left",
      "label": "t:sections.header.settings.logo_position.label"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.menu.label"
    },
    {
      "type": "checkbox",
      "id": "show_line_separator",
      "default": true,
      "label": "t:sections.header.settings.show_line_separator.label"
    },
    {
      "type": "checkbox",
      "id": "enable_sticky_header",
      "default": true,
      "label": "t:sections.header.settings.enable_sticky_header.label",
      "info": "t:sections.header.settings.enable_sticky_header.info"
    }
  ]
}
{% endschema %}
